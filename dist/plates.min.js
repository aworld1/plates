import _ from"lodash";const DEFAULT_OPTIONS={alwaysPushRaw:false,onStackPush:()=>{},onStackClear:()=>{}};class Plates{constructor(data,options){this.setOptions(options);this.stack=[];this.stackPointer=0;if(data)this.push(data)}setOptions(options){this.options=Object.assign({},DEFAULT_OPTIONS,options)}updateOptions(options){this.options=Object.assign({},this.options,options)}undo(){this.stackPointer=Math.max(0,this.stackPointer-1)}redo(){this.stackPointer=Math.min(this.stack.length,this.stackPointer+1)}hasUndo(){return this.stackPointer>0}hasRedo(){return this.stackPointer<this.stack.length}clear(){this.stack=[];this.stackPointer=0;this.options.onStackClear()}goToStart(){this.stackPointer=0}goToEnd(){this.stackPointer=this.stack.length}push(obj){obj=JSON.parse(JSON.stringify(obj));this.stack=this.stack.slice(0,this.stackPointer);let curr=this.get();let raw=new Data(obj);if(obj instanceof Object&&curr instanceof Object&&!this.options.alwaysPushRaw){let diff=new Change(curr,obj);let sizeDiff=this._roughSizeOfObject(diff)-this._roughSizeOfObject(raw);sizeDiff>0?this.stack.push(raw):this.stack.push(diff)}else{this.stack.push(raw)}this.stackPointer++;this.options.onStackPush()}get(){let dataPointer=-1;for(let i=this.stackPointer-1;i>=0;i--){if(this.stack[i]instanceof Data){dataPointer=i;break}}if(dataPointer<0){return null}let obj=this.stack[dataPointer].get();for(let i=dataPointer;i<this.stackPointer-1;i++){obj=this.stack[i+1].recoverObj(obj)}if(Object.keys(obj).some(key=>/^\d+$/.test(key))){obj=Object.keys(obj).map(key=>obj[key])}return obj}_roughSizeOfObject(object){let objectList=[];let stack=[object];let bytes=0;while(stack.length){let value=stack.pop();if(typeof value==="boolean"){bytes+=4}else if(typeof value==="string"){bytes+=value.length*2}else if(typeof value==="number"){bytes+=8}else if(typeof value==="object"&&objectList.indexOf(value)===-1){objectList.push(value);for(let i in value){stack.push(value[i])}}}return bytes}}class Data{constructor(data){this.data=data}get(){return this.data}}const MARKED_DELETE="~$*MARKED FOR DELETION*$~";class Change{constructor(before,after){this.differences=this.computeDifferences(before,after)}computeDifferences(obj1,obj2){const diff={};function compareObjects(obj1,obj2,path=""){for(const key in obj1){const currentPath=path?`${path}.${key}`:key;if(obj2.hasOwnProperty(key)){if(typeof obj1[key]==="object"&&typeof obj2[key]==="object"){compareObjects(obj1[key],obj2[key],currentPath)}else if(obj1[key]!==obj2[key]){diff[currentPath]=obj2[key]}}else{diff[currentPath]=MARKED_DELETE}}for(const key in obj2){const currentPath=path?`${path}.${key}`:key;if(!obj1.hasOwnProperty(key)&&!diff.hasOwnProperty(currentPath)){diff[currentPath]=obj2[key]}}}compareObjects(obj1,obj2);return diff}recoverObj(obj){let diff=this.differences;const recoveredObj={};function traverseObject(obj,path=""){for(const key in obj){const currentPath=path?`${path}.${key}`:key;if(diff.hasOwnProperty(currentPath)){const diffValue=diff[currentPath];if(diffValue===null||diffValue===undefined){recoveredObj[key]=diffValue;continue}if(diffValue===MARKED_DELETE)continue;if(typeof diffValue==="object"){recoveredObj[key]=traverseObject(obj[key],currentPath)}else{recoveredObj[key]=diffValue}}else{recoveredObj[key]=obj[key]}}for(const key in diff){if(!obj.hasOwnProperty(key)){_.set(recoveredObj,key,_.get(diff,key))}}return recoveredObj}return traverseObject(obj)}get(){return this.differences}}export default Plates;